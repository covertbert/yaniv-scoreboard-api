// Code generated by Prisma (prisma@1.17.0-beta.26). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  game: (where?: GameWhereInput) => Promise<boolean>;
  player: (where?: PlayerWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  game: (where: GameWhereUniqueInput) => Game;
  games: (
    args?: {
      where?: GameWhereInput;
      orderBy?: GameOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<GameNode>>;
  gamesConnection: (
    args?: {
      where?: GameWhereInput;
      orderBy?: GameOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GameConnection;
  player: (where: PlayerWhereUniqueInput) => Player;
  players: (
    args?: {
      where?: PlayerWhereInput;
      orderBy?: PlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<PlayerNode>>;
  playersConnection: (
    args?: {
      where?: PlayerWhereInput;
      orderBy?: PlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PlayerConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGame: (data: GameCreateInput) => Game;
  updateGame: (
    args: { data: GameUpdateInput; where: GameWhereUniqueInput }
  ) => Game;
  updateManyGames: (
    args: { data: GameUpdateInput; where?: GameWhereInput }
  ) => BatchPayload;
  upsertGame: (
    args: {
      where: GameWhereUniqueInput;
      create: GameCreateInput;
      update: GameUpdateInput;
    }
  ) => Game;
  deleteGame: (where: GameWhereUniqueInput) => Game;
  deleteManyGames: (where?: GameWhereInput) => BatchPayload;
  createPlayer: (data: PlayerCreateInput) => Player;
  updatePlayer: (
    args: { data: PlayerUpdateInput; where: PlayerWhereUniqueInput }
  ) => Player;
  updateManyPlayers: (
    args: { data: PlayerUpdateInput; where?: PlayerWhereInput }
  ) => BatchPayload;
  upsertPlayer: (
    args: {
      where: PlayerWhereUniqueInput;
      create: PlayerCreateInput;
      update: PlayerUpdateInput;
    }
  ) => Player;
  deletePlayer: (where: PlayerWhereUniqueInput) => Player;
  deleteManyPlayers: (where?: PlayerWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  game: (
    where?: GameSubscriptionWhereInput
  ) => GameSubscriptionPayloadSubscription;
  player: (
    where?: PlayerSubscriptionWhereInput
  ) => PlayerSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PlayerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "score_ASC"
  | "score_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GameOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "targetScore_ASC"
  | "targetScore_DESC"
  | "hasFinished_ASC"
  | "hasFinished_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface PlayerCreateManyWithoutGameInput {
  create?: PlayerCreateWithoutGameInput[] | PlayerCreateWithoutGameInput;
  connect?: PlayerWhereUniqueInput[] | PlayerWhereUniqueInput;
}

export type GameWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PlayerUpdateManyWithoutGameInput {
  create?: PlayerCreateWithoutGameInput[] | PlayerCreateWithoutGameInput;
  delete?: PlayerWhereUniqueInput[] | PlayerWhereUniqueInput;
  connect?: PlayerWhereUniqueInput[] | PlayerWhereUniqueInput;
  disconnect?: PlayerWhereUniqueInput[] | PlayerWhereUniqueInput;
  update?:
    | PlayerUpdateWithWhereUniqueWithoutGameInput[]
    | PlayerUpdateWithWhereUniqueWithoutGameInput;
  upsert?:
    | PlayerUpsertWithWhereUniqueWithoutGameInput[]
    | PlayerUpsertWithWhereUniqueWithoutGameInput;
}

export interface PlayerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  game?: GameWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  score?: Int;
  score_not?: Int;
  score_in?: Int[] | Int;
  score_not_in?: Int[] | Int;
  score_lt?: Int;
  score_lte?: Int;
  score_gt?: Int;
  score_gte?: Int;
  AND?: PlayerWhereInput[] | PlayerWhereInput;
  OR?: PlayerWhereInput[] | PlayerWhereInput;
  NOT?: PlayerWhereInput[] | PlayerWhereInput;
}

export interface GameCreateOneWithoutPlayersInput {
  create?: GameCreateWithoutPlayersInput;
  connect?: GameWhereUniqueInput;
}

export interface GameWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  targetScore?: Int;
  targetScore_not?: Int;
  targetScore_in?: Int[] | Int;
  targetScore_not_in?: Int[] | Int;
  targetScore_lt?: Int;
  targetScore_lte?: Int;
  targetScore_gt?: Int;
  targetScore_gte?: Int;
  players_every?: PlayerWhereInput;
  players_some?: PlayerWhereInput;
  players_none?: PlayerWhereInput;
  hasFinished?: Boolean;
  hasFinished_not?: Boolean;
  AND?: GameWhereInput[] | GameWhereInput;
  OR?: GameWhereInput[] | GameWhereInput;
  NOT?: GameWhereInput[] | GameWhereInput;
}

export interface PlayerCreateInput {
  game?: GameCreateOneWithoutPlayersInput;
  name: String;
  score?: Int;
}

export interface PlayerUpdateWithWhereUniqueWithoutGameInput {
  where: PlayerWhereUniqueInput;
  data: PlayerUpdateWithoutGameDataInput;
}

export interface PlayerUpsertWithWhereUniqueWithoutGameInput {
  where: PlayerWhereUniqueInput;
  update: PlayerUpdateWithoutGameDataInput;
  create: PlayerCreateWithoutGameInput;
}

export interface GameSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GameWhereInput;
  AND?: GameSubscriptionWhereInput[] | GameSubscriptionWhereInput;
  OR?: GameSubscriptionWhereInput[] | GameSubscriptionWhereInput;
  NOT?: GameSubscriptionWhereInput[] | GameSubscriptionWhereInput;
}

export interface GameUpdateWithoutPlayersDataInput {
  targetScore?: Int;
  hasFinished?: Boolean;
}

export interface PlayerUpdateInput {
  game?: GameUpdateOneWithoutPlayersInput;
  name?: String;
  score?: Int;
}

export interface GameUpdateInput {
  targetScore?: Int;
  players?: PlayerUpdateManyWithoutGameInput;
  hasFinished?: Boolean;
}

export interface PlayerCreateWithoutGameInput {
  name: String;
  score?: Int;
}

export interface PlayerUpdateWithoutGameDataInput {
  name?: String;
  score?: Int;
}

export interface GameCreateInput {
  targetScore: Int;
  players?: PlayerCreateManyWithoutGameInput;
  hasFinished?: Boolean;
}

export interface GameCreateWithoutPlayersInput {
  targetScore: Int;
  hasFinished?: Boolean;
}

export interface GameUpdateOneWithoutPlayersInput {
  create?: GameCreateWithoutPlayersInput;
  update?: GameUpdateWithoutPlayersDataInput;
  upsert?: GameUpsertWithoutPlayersInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: GameWhereUniqueInput;
}

export interface GameUpsertWithoutPlayersInput {
  update: GameUpdateWithoutPlayersDataInput;
  create: GameCreateWithoutPlayersInput;
}

export interface PlayerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PlayerWhereInput;
  AND?: PlayerSubscriptionWhereInput[] | PlayerSubscriptionWhereInput;
  OR?: PlayerSubscriptionWhereInput[] | PlayerSubscriptionWhereInput;
  NOT?: PlayerSubscriptionWhereInput[] | PlayerSubscriptionWhereInput;
}

export type PlayerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface PlayerPreviousValuesNode {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
  score?: Int;
}

export interface PlayerPreviousValues
  extends Promise<PlayerPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  score: () => Promise<Int>;
}

export interface PlayerPreviousValuesSubscription
  extends Promise<AsyncIterator<PlayerPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  score: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateGameNode {
  count: Int;
}

export interface AggregateGame
  extends Promise<AggregateGameNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGameSubscription
  extends Promise<AsyncIterator<AggregateGameNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GameNode {
  id: ID_Output;
  createdAt: DateTimeOutput;
  targetScore: Int;
  hasFinished?: Boolean;
}

export interface Game extends Promise<GameNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  targetScore: () => Promise<Int>;
  players: <T = Promise<Array<PlayerNode>>>(
    args?: {
      where?: PlayerWhereInput;
      orderBy?: PlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  hasFinished: () => Promise<Boolean>;
}

export interface GameSubscription
  extends Promise<AsyncIterator<GameNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  targetScore: () => Promise<AsyncIterator<Int>>;
  players: <T = Promise<AsyncIterator<Array<PlayerSubscription>>>>(
    args?: {
      where?: PlayerWhereInput;
      orderBy?: PlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  hasFinished: () => Promise<AsyncIterator<Boolean>>;
}

export interface GameEdgeNode {
  cursor: String;
}

export interface GameEdge extends Promise<GameEdgeNode>, Fragmentable {
  node: <T = Game>() => T;
  cursor: () => Promise<String>;
}

export interface GameEdgeSubscription
  extends Promise<AsyncIterator<GameEdgeNode>>,
    Fragmentable {
  node: <T = GameSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PlayerNode {
  id: ID_Output;
  createdAt: DateTimeOutput;
  name: String;
  score?: Int;
}

export interface Player extends Promise<PlayerNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  game: <T = Game>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  score: () => Promise<Int>;
}

export interface PlayerSubscription
  extends Promise<AsyncIterator<PlayerNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  game: <T = GameSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  score: () => Promise<AsyncIterator<Int>>;
}

export interface GameSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface GameSubscriptionPayload
  extends Promise<GameSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Game>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GamePreviousValues>() => T;
}

export interface GameSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GameSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GameSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GamePreviousValuesSubscription>() => T;
}

export interface GameConnectionNode {}

export interface GameConnection
  extends Promise<GameConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<GameEdgeNode>>>() => T;
  aggregate: <T = AggregateGame>() => T;
}

export interface GameConnectionSubscription
  extends Promise<AsyncIterator<GameConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<GameEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateGameSubscription>() => T;
}

export interface GamePreviousValuesNode {
  id: ID_Output;
  createdAt: DateTimeOutput;
  targetScore: Int;
  hasFinished?: Boolean;
}

export interface GamePreviousValues
  extends Promise<GamePreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  targetScore: () => Promise<Int>;
  hasFinished: () => Promise<Boolean>;
}

export interface GamePreviousValuesSubscription
  extends Promise<AsyncIterator<GamePreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  targetScore: () => Promise<AsyncIterator<Int>>;
  hasFinished: () => Promise<AsyncIterator<Boolean>>;
}

export interface PlayerSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PlayerSubscriptionPayload
  extends Promise<PlayerSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Player>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlayerPreviousValues>() => T;
}

export interface PlayerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlayerSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlayerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlayerPreviousValuesSubscription>() => T;
}

export interface AggregatePlayerNode {
  count: Int;
}

export interface AggregatePlayer
  extends Promise<AggregatePlayerNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlayerSubscription
  extends Promise<AsyncIterator<AggregatePlayerNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PlayerConnectionNode {}

export interface PlayerConnection
  extends Promise<PlayerConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<PlayerEdgeNode>>>() => T;
  aggregate: <T = AggregatePlayer>() => T;
}

export interface PlayerConnectionSubscription
  extends Promise<AsyncIterator<PlayerConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<PlayerEdgeSubscription>>>>() => T;
  aggregate: <T = AggregatePlayerSubscription>() => T;
}

export interface PlayerEdgeNode {
  cursor: String;
}

export interface PlayerEdge extends Promise<PlayerEdgeNode>, Fragmentable {
  node: <T = Player>() => T;
  cursor: () => Promise<String>;
}

export interface PlayerEdgeSubscription
  extends Promise<AsyncIterator<PlayerEdgeNode>>,
    Fragmentable {
  node: <T = PlayerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Type Defs
 */

export const prisma: Prisma;
